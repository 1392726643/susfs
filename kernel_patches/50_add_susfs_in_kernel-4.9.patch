diff --git a/fs/Makefile b/fs/Makefile
index 0e97f4b85bee4..5ef37c17ee915 100644
--- a/fs/Makefile
+++ b/fs/Makefile
@@ -13,6 +13,8 @@ obj-y :=	open.o read_write.o file_table.o super.o \
 		pnode.o splice.o sync.o utimes.o \
 		stack.o fs_struct.o statfs.o fs_pin.o nsfs.o
 
+obj-$(CONFIG_KSU_SUSFS) += susfs.o
+
 ifeq ($(CONFIG_BLOCK),y)
 obj-y +=	buffer.o block_dev.o direct-io.o mpage.o
 else
diff --git a/fs/internal.h b/fs/internal.h
index 3e58863de5144..4fe0133cc4f6e 100644
--- a/fs/internal.h
+++ b/fs/internal.h
@@ -74,6 +74,10 @@ extern int __mnt_want_write_file(struct file *);
 extern void __mnt_drop_write(struct vfsmount *);
 extern void __mnt_drop_write_file(struct file *);
 
+#ifdef CONFIG_KSU_SUSFS
+int path_umount(struct path *path, int flags);
+#endif
+
 /*
  * fs_struct.c
  */
diff --git a/fs/mount.h b/fs/mount.h
index 3603884a63ddb..a1e3b2593a486 100644
--- a/fs/mount.h
+++ b/fs/mount.h
@@ -64,6 +64,12 @@ struct mount {
 	__u32 mnt_fsnotify_mask;
 #endif
 	int mnt_id;			/* mount identifier */
+#ifdef CONFIG_KSU_SUSFS_SUS_MOUNT
+	bool is_sus_mount;
+#endif
+#ifdef CONFIG_KSU_SUSFS_SUS_MOUNT_MNT_ID_REORDER
+	int fake_mnt_id;
+#endif
 	int mnt_group_id;		/* peer group identifier */
 	int mnt_expiry_mark;		/* true if marked for expiry */
 	struct hlist_head mnt_pins;
diff --git a/fs/namespace.c b/fs/namespace.c
index 532baf2380f78..efb1806782fa9 100644
--- a/fs/namespace.c
+++ b/fs/namespace.c
@@ -230,6 +230,10 @@ static struct mount *alloc_vfsmnt(const char *name)
 #endif
 		mnt->mnt.data = NULL;
 
+#ifdef CONFIG_KSU_SUSFS_SUS_MOUNT
+		mnt->is_sus_mount = false;
+#endif
+
 		INIT_HLIST_NODE(&mnt->mnt_hash);
 		INIT_LIST_HEAD(&mnt->mnt_child);
 		INIT_LIST_HEAD(&mnt->mnt_mounts);
@@ -1711,6 +1715,40 @@ static inline bool may_mandlock(void)
 }
 #endif
 
+static int can_umount(const struct path *path, int flags)
+{
+    struct mount *mnt = real_mount(path->mnt);
+
+    if (flags & ~(MNT_FORCE | MNT_DETACH | MNT_EXPIRE | UMOUNT_NOFOLLOW))
+        return -EINVAL;
+    if (!may_mount())
+        return -EPERM;
+    if (path->dentry != path->mnt->mnt_root)
+        return -EINVAL;
+    if (!check_mnt(mnt))
+        return -EINVAL;
+    if (mnt->mnt.mnt_flags & MNT_LOCKED) /* Check optimistically */
+        return -EINVAL;
+    if (flags & MNT_FORCE && !capable(CAP_SYS_ADMIN))
+        return -EPERM;
+    return 0;
+}
+
+int path_umount(struct path *path, int flags)
+{
+    struct mount *mnt = real_mount(path->mnt);
+    int ret;
+
+    ret = can_umount(path, flags);
+    if (!ret)
+        ret = do_umount(mnt, flags);
+
+    /* we mustn't call path_put() as that would clear mnt_expiry_mark */
+    dput(path->dentry);
+    mntput_no_expire(mnt);
+    return ret;
+}
+
 /*
  * Now umount can handle mount points as well as block devices.
  * This is important for filesystems which use unnamed block devices.
diff --git a/fs/proc/base.c b/fs/proc/base.c
index b6959f6dae5b3..9665ef85f7780 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -97,6 +97,10 @@
 
 #include "../../lib/kstrtox.h"
 
+#ifdef CONFIG_KSU_SUSFS
+#include <linux/susfs.h>
+#endif
+
 /* NOTE:
  *	Implementing inode permission operations in /proc is almost
  *	certainly an error.  Permission checks need to happen during
@@ -1828,6 +1832,15 @@ static int do_proc_readlink(struct path *path, char __user *buffer, int buflen)
 	char *pathname;
 	int len;
 
+#ifdef CONFIG_KSU_SUSFS_SUS_MAPS
+	struct mm_struct *mm;
+	struct vm_area_struct *vma;
+	struct file *vma_file;
+	struct dentry *vma_dentry;
+	struct inode *vma_inode;
+	unsigned long ino;
+#endif
+
 	if (!tmp)
 		return -ENOMEM;
 
@@ -1839,6 +1852,38 @@ static int do_proc_readlink(struct path *path, char __user *buffer, int buflen)
 
 	if (len > buflen)
 		len = buflen;
+
+#ifdef CONFIG_KSU_SUSFS_SUS_PROC_FD_LINK
+	if (!susfs_is_sus_proc_fd_link_list_empty()) {
+		if (susfs_sus_proc_fd_link(pathname, len))
+			goto orig_flow;
+	}
+#endif
+
+
+#ifdef CONFIG_KSU_SUSFS_SUS_MAPS
+	if (!susfs_is_sus_maps_list_empty()) {
+		mm = current->mm;
+		down_read(&mm->mmap_sem);
+		for (vma = mm->mmap; vma; vma = vma->vm_next) {
+			if (vma->vm_file) {
+				vma_file = vma->vm_file;
+				vma_dentry = vma_file->f_path.dentry;
+				if (vma_dentry == path->dentry) {
+					vma_inode = file_inode(vma_file);
+					ino = vma_inode->i_ino;
+					susfs_sus_map_files_readlink(ino, pathname);
+					break;
+				}
+			}
+		}
+		up_read(&mm->mmap_sem);
+	}
+#endif
+
+#ifdef CONFIG_KSU_SUSFS_SUS_PROC_FD_LINK
+orig_flow:
+#endif
 	if (copy_to_user(buffer, pathname, len))
 		len = -EFAULT;
  out:
@@ -2207,6 +2252,9 @@ struct map_files_info {
 	fmode_t		mode;
 	unsigned long	len;
 	unsigned char	name[4*sizeof(long)+2]; /* max: %lx-%lx\0 */
+#ifdef CONFIG_KSU_SUSFS_SUS_MAPS
+	int susfs_action;
+#endif
 };
 
 /*
@@ -2269,6 +2317,10 @@ static struct dentry *proc_map_files_lookup(struct inode *dir,
 	int result;
 	struct mm_struct *mm;
 
+#ifdef CONFIG_KSU_SUSFS_SUS_MAPS
+	int ret = 0;
+#endif
+
 	result = -ENOENT;
 	task = get_proc_task(dir);
 	if (!task)
@@ -2291,6 +2343,23 @@ static struct dentry *proc_map_files_lookup(struct inode *dir,
 	if (!vma)
 		goto out_no_vma;
 
+#ifdef CONFIG_KSU_SUSFS_SUS_MAPS
+	if (vma->vm_file) {
+		ret = susfs_sus_map_files_instantiate(vma);
+		if (ret == 1) {
+			if (vma->vm_file->f_mode & FMODE_WRITE) {
+				vma->vm_file->f_mode &= ~FMODE_WRITE;
+			}
+			goto orig_flow;
+		}
+		if (ret == 2) {
+			result = -ENOENT;
+			goto out_no_vma; 
+		}
+	}
+orig_flow:
+#endif
+
 	if (vma->vm_file)
 		result = proc_map_files_instantiate(dir, dentry, task,
 				(void *)(unsigned long)vma->vm_file->f_mode);
@@ -2322,6 +2391,10 @@ proc_map_files_readdir(struct file *file, struct dir_context *ctx)
 	struct map_files_info *p;
 	int ret;
 
+#ifdef CONFIG_KSU_SUSFS_SUS_MAPS
+	int susfs_ret = 0;
+#endif
+
 	ret = -ENOENT;
 	task = get_proc_task(file_inode(file));
 	if (!task)
@@ -2380,6 +2453,12 @@ proc_map_files_readdir(struct file *file, struct dir_context *ctx)
 			info.len = snprintf(info.name,
 					sizeof(info.name), "%lx-%lx",
 					vma->vm_start, vma->vm_end);
+
+#ifdef CONFIG_KSU_SUSFS_SUS_MAPS
+			susfs_ret = susfs_sus_map_files_instantiate(vma);
+			info.susfs_action = susfs_ret;
+#endif
+
 			if (flex_array_put(fa, i++, &info, GFP_KERNEL))
 				BUG();
 		}
@@ -2388,12 +2467,28 @@ proc_map_files_readdir(struct file *file, struct dir_context *ctx)
 
 	for (i = 0; i < nr_files; i++) {
 		p = flex_array_get(fa, i);
+
+#ifdef CONFIG_KSU_SUSFS_SUS_MAPS
+		if (p->susfs_action == SUSFS_MAP_FILES_ACTION_REMOVE_WRITE_PERM) {
+			if (p->mode & FMODE_WRITE) {
+				p->mode &= ~FMODE_WRITE;
+			}
+		} else if (p->susfs_action == SUSFS_MAP_FILES_ACTION_HIDE_DENTRY) {
+			goto skip_proc_fill_cache;
+		}
+#endif
+
 		if (!proc_fill_cache(file, ctx,
 				      p->name, p->len,
 				      proc_map_files_instantiate,
 				      task,
 				      (void *)(unsigned long)p->mode))
 			break;
+
+#ifdef CONFIG_KSU_SUSFS_SUS_MAPS
+skip_proc_fill_cache:
+#endif
+
 		ctx->pos++;
 	}
 	if (fa)
diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c
index f4a77817ad74c..c2b36c3b317a1 100644
--- a/fs/proc/task_mmu.c
+++ b/fs/proc/task_mmu.c
@@ -22,6 +22,10 @@
 #include <asm/tlbflush.h>
 #include "internal.h"
 
+#ifdef CONFIG_KSU_SUSFS
+#include <linux/susfs.h>
+#endif
+
 void task_mem(struct seq_file *m, struct mm_struct *mm)
 {
 	unsigned long text, lib, swap, ptes, pmds, anon, file, shmem;
@@ -358,6 +362,10 @@ show_map_vma(struct seq_file *m, struct vm_area_struct *vma, int is_pid)
 	unsigned long start, end;
 	dev_t dev = 0;
 	const char *name = NULL;
+#ifdef CONFIG_KSU_SUSFS_SUS_MAPS
+	char *out_name;
+	int ret = 0;
+#endif
 
 	if (file) {
 		struct inode *inode = file_inode(vma->vm_file);
@@ -369,8 +377,28 @@ show_map_vma(struct seq_file *m, struct vm_area_struct *vma, int is_pid)
 	/* We don't show the stack guard page in /proc/maps */
 	start = vma->vm_start;
 	end = vma->vm_end;
+
+#ifdef CONFIG_KSU_SUSFS_SUS_MAPS
+	out_name = kmalloc(SUSFS_MAX_LEN_PATHNAME, GFP_KERNEL);
+	if (!out_name)
+		goto orig_flow;
+	ret = susfs_sus_maps(ino, end - start, &ino, &dev, &flags, &pgoff, vma, out_name);
+
+orig_flow:
+#endif
+
 	show_vma_header_prefix(m, start, end, flags, pgoff, dev, ino);
 
+#ifdef CONFIG_KSU_SUSFS_SUS_MAPS
+	if (ret == 2) {
+		seq_pad(m, ' ');
+		seq_puts(m, out_name);
+		seq_putc(m, '\n');
+		kfree(out_name);
+		return;
+	}
+	kfree(out_name);
+#endif
 	/*
 	 * Print the dentry name for named mappings, and a
 	 * special [heap] marker for the heap:
diff --git a/fs/proc_namespace.c b/fs/proc_namespace.c
index 6863773aff252..dd9e021dc1f22 100644
--- a/fs/proc_namespace.c
+++ b/fs/proc_namespace.c
@@ -15,6 +15,10 @@
 #include "pnode.h"
 #include "internal.h"
 
+#ifdef CONFIG_KSU_SUSFS
+#include <linux/susfs.h>
+#endif
+
 static unsigned mounts_poll(struct file *file, poll_table *wait)
 {
 	struct seq_file *m = file->private_data;
@@ -99,6 +103,11 @@ static int show_vfsmnt(struct seq_file *m, struct vfsmount *mnt)
 	struct super_block *sb = mnt_path.dentry->d_sb;
 	int err;
 
+#ifdef CONFIG_KSU_SUSFS_SUS_MOUNT
+	if (unlikely(r->is_sus_mount))
+		return SEQ_SKIP;
+#endif
+
 	if (sb->s_op->show_devname) {
 		err = sb->s_op->show_devname(m, mnt_path.dentry);
 		if (err)
@@ -135,8 +144,23 @@ static int show_mountinfo(struct seq_file *m, struct vfsmount *mnt)
 	struct path mnt_path = { .dentry = mnt->mnt_root, .mnt = mnt };
 	int err;
 
+#ifdef CONFIG_KSU_SUSFS_SUS_MOUNT
+	if (unlikely(r->is_sus_mount))
+		return SEQ_SKIP;
+#ifdef CONFIG_KSU_SUSFS_SUS_MOUNT_MNT_ID_REORDER
+	if (!uid_matches_proc_need_to_reorder_mnt_id())
+		goto orig_flow;
+	seq_printf(m, "%i %i %u:%u ", r->fake_mnt_id, r->mnt_parent->fake_mnt_id,
+				MAJOR(sb->s_dev), MINOR(sb->s_dev));
+	goto bypass_orig_flow;
+orig_flow:
+#endif //#ifdef CONFIG_KSU_SUSFS_SUS_MOUNT_MNT_ID_REORDER
+#endif //#ifdef CONFIG_KSU_SUSFS_SUS_MOUNT
 	seq_printf(m, "%i %i %u:%u ", r->mnt_id, r->mnt_parent->mnt_id,
 		   MAJOR(sb->s_dev), MINOR(sb->s_dev));
+#ifdef CONFIG_KSU_SUSFS_SUS_MOUNT_MNT_ID_REORDER
+bypass_orig_flow:
+#endif
 	if (sb->s_op->show_path) {
 		err = sb->s_op->show_path(m, mnt->mnt_root);
 		if (err)
@@ -199,6 +223,11 @@ static int show_vfsstat(struct seq_file *m, struct vfsmount *mnt)
 	struct super_block *sb = mnt_path.dentry->d_sb;
 	int err;
 
+#ifdef CONFIG_KSU_SUSFS_SUS_MOUNT
+	if (unlikely(r->is_sus_mount))
+		return SEQ_SKIP;
+#endif
+
 	/* device */
 	if (sb->s_op->show_devname) {
 		seq_puts(m, "device ");
diff --git a/fs/readdir.c b/fs/readdir.c
index 1059f2a9be0b2..288ba4cfbd79b 100644
--- a/fs/readdir.c
+++ b/fs/readdir.c
@@ -21,6 +21,10 @@
 
 #include <asm/uaccess.h>
 
+#ifdef CONFIG_KSU_SUSFS
+#include <linux/susfs.h>
+#endif
+
 int iterate_dir(struct file *file, struct dir_context *ctx)
 {
 	struct inode *inode = file_inode(file);
@@ -301,6 +305,11 @@ static int filldir64(struct dir_context *ctx, const char *name, int namlen,
 	buf->error = -EINVAL;	/* only used if we fail.. */
 	if (reclen > buf->count)
 		return -EINVAL;
+	if (!susfs_is_sus_path_list_empty() && uid_matches_suspicious_path()) {
+		if (unlikely(susfs_sus_ino_for_filldir64(ino))) {
+			return 0;
+		}
+	}
 	dirent = buf->previous;
 	if (dirent) {
 		if (signal_pending(current))
diff --git a/fs/stat.c b/fs/stat.c
index 068fdbcc9e26a..dee9c9a1df51b 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -18,8 +18,30 @@
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
 
+#ifdef CONFIG_KSU_SUSFS
+#include <linux/susfs.h>
+#endif
+
 void generic_fillattr(struct inode *inode, struct kstat *stat)
 {
+#ifdef CONFIG_KSU_SUSFS_SUS_KSTAT
+	if (unlikely(inode->is_sus_kstat && uid_matches_suspicious_kstat())) {
+		stat->dev = inode->sus_kstat.dev;
+		stat->ino = inode->sus_kstat.ino;
+		stat->mode = inode->sus_kstat.mode;
+		stat->nlink = inode->sus_kstat.nlink;
+		stat->uid = inode->sus_kstat.uid;
+		stat->gid = inode->sus_kstat.gid;
+		stat->rdev = inode->sus_kstat.rdev;
+		stat->size = inode->sus_kstat.size;
+		stat->atime = inode->sus_kstat.atime;
+		stat->mtime = inode->sus_kstat.mtime;
+		stat->ctime = inode->sus_kstat.ctime;
+		stat->blksize = inode->sus_kstat.blksize;
+		stat->blocks = inode->sus_kstat.blocks;
+		return;
+	}
+#endif
 	stat->dev = inode->i_sb->s_dev;
 	stat->ino = inode->i_ino;
 	stat->mode = inode->i_mode;
diff --git a/include/linux/fs.h b/include/linux/fs.h
index bb94ab942b66c..31bdd1b3bec40 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -623,6 +623,24 @@ is_uncached_acl(struct posix_acl *acl)
 #define IOP_NOFOLLOW	0x0004
 #define IOP_XATTR	0x0008
 
+#ifdef CONFIG_KSU_SUSFS_SUS_KSTAT
+struct sus_kstat {
+	u64                 ino;
+	dev_t               dev;
+	umode_t             mode;
+	unsigned int        nlink;
+	kuid_t              uid;
+	kgid_t              gid;
+	dev_t               rdev;
+	loff_t              size;
+	struct timespec     atime;
+	struct timespec     mtime;
+	struct timespec     ctime;
+	unsigned long       blksize;
+	unsigned long long  blocks;
+};
+#endif
+
 /*
  * Keep mostly read-only and often accessed (especially for
  * the RCU path lookup and 'stat' data) fields at the beginning
@@ -737,6 +755,15 @@ struct inode {
 	struct list_head	i_fsverity_list;	/* Not for upstream */
 #endif
 	void			*i_private; /* fs or device private pointer */
+
+#ifdef CONFIG_KSU_SUSFS_SUS_KSTAT
+	struct sus_kstat sus_kstat;
+	bool is_sus_kstat;
+#endif
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	bool is_sus_path;
+#endif
+
 };
 
 static inline unsigned int i_blocksize(const struct inode *node)
diff --git a/kernel/fork.c b/kernel/fork.c
index a0988fcb62cd6..9aa8e3ffdcc92 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -94,6 +94,10 @@
 #define CREATE_TRACE_POINTS
 #include <trace/events/task.h>
 
+#ifdef CONFIG_KSU_SUSFS
+#include <linux/susfs.h>
+#endif
+
 /*
  * Minimum number of threads to boot the kernel
  */
@@ -1996,6 +2000,10 @@ static __latent_entropy struct task_struct *copy_process(
 	trace_task_newtask(p, clone_flags);
 	uprobe_copy_process(p, clone_flags);
 
+#ifdef CONFIG_KSU_SUSFS_SUS_MOUNT
+	susfs_sus_mount(p->nsproxy->mnt_ns);
+#endif
+
 	return p;
 
 bad_fork_cancel_cgroup:
@@ -2407,6 +2415,10 @@ SYSCALL_DEFINE1(unshare, unsigned long, unshare_flags)
 	if (err)
 		goto bad_unshare_cleanup_cred;
 
+#ifdef CONFIG_KSU_SUSFS_SUS_MOUNT
+	susfs_sus_mount(new_nsproxy->mnt_ns);
+#endif
+
 	if (new_fs || new_fd || do_sysvsem || new_cred || new_nsproxy) {
 		if (do_sysvsem) {
 			/*
diff --git a/kernel/sys.c b/kernel/sys.c
index a7f8232245463..b4ef430350a98 100644
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -66,6 +66,10 @@
 #include <asm/io.h>
 #include <asm/unistd.h>
 
+#ifdef CONFIG_KSU_SUSFS
+#include <linux/susfs.h>
+#endif
+
 #ifndef SET_UNALIGN_CTL
 # define SET_UNALIGN_CTL(a, b)	(-EINVAL)
 #endif
@@ -1148,7 +1152,14 @@ SYSCALL_DEFINE1(newuname, struct new_utsname __user *, name)
 	struct new_utsname tmp;
 
 	down_read(&uts_sem);
+#ifdef CONFIG_KSU_SUSFS_SPOOF_UNAME
+	if (likely(!susfs_spoof_uname(&tmp)))
+		goto bypass_orig_flow;
+#endif
 	memcpy(&tmp, utsname(), sizeof(tmp));
+#ifdef CONFIG_KSU_SUSFS_SPOOF_UNAME
+bypass_orig_flow:
+#endif
 	up_read(&uts_sem);
 	if (copy_to_user(name, &tmp, sizeof(tmp)))
 		return -EFAULT;
diff --git a/mm/shmem.c b/mm/shmem.c
index 9cb863a19d074..f91b4b4595ca2 100644
--- a/mm/shmem.c
+++ b/mm/shmem.c
@@ -33,6 +33,9 @@
 #include <linux/swap.h>
 #include <linux/uio.h>
 #include <linux/khugepaged.h>
+#ifdef CONFIG_KSU_SUSFS
+#include <linux/susfs.h>
+#endif
 
 static struct vfsmount *shm_mnt;
 
@@ -3562,6 +3565,13 @@ SYSCALL_DEFINE2(memfd_create,
 		goto err_name;
 	}
 
+#ifdef CONFIG_KSU_SUSFS_SUS_MEMFD
+	if (susfs_sus_memfd(name)) {
+		error = -EFAULT;
+		goto err_name;
+	}
+#endif
+
 	fd = get_unused_fd_flags((flags & MFD_CLOEXEC) ? O_CLOEXEC : 0);
 	if (fd < 0) {
 		error = fd;
diff --git a/security/security.c b/security/security.c
index fa7c5d750a437..f684d2b7944a3 100644
--- a/security/security.c
+++ b/security/security.c
@@ -28,6 +28,10 @@
 #include <linux/backing-dev.h>
 #include <net/flow.h>
 
+#ifdef CONFIG_KSU_SUSFS
+#include <linux/susfs.h>
+#endif
+
 #define MAX_LSM_EVM_XATTR	2
 
 /* Maximum number of letters for an LSM name string */
@@ -347,6 +351,12 @@ EXPORT_SYMBOL(security_sb_parse_opts_str);
 int security_inode_alloc(struct inode *inode)
 {
 	inode->i_security = NULL;
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	inode->is_sus_path = false;
+#endif
+#ifdef CONFIG_KSU_SUSFS_SUS_KSTAT
+	inode->is_sus_kstat = false;
+#endif
 	return call_int_hook(inode_alloc_security, 0, inode);
 }
 
@@ -440,39 +450,94 @@ EXPORT_SYMBOL(security_path_mkdir);
 
 int security_path_rmdir(const struct path *dir, struct dentry *dentry)
 {
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	int ret;
+#endif
 	if (unlikely(IS_PRIVATE(d_backing_inode(dir->dentry))))
 		return 0;
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	ret = call_int_hook(path_rmdir, 0, dir, dentry);
+	if (!ret) {
+		if (unlikely(dir->dentry->d_inode->is_sus_path && uid_matches_suspicious_path())) {
+			return -ENOENT;
+		}
+	}
+	return ret;
+#else
 	return call_int_hook(path_rmdir, 0, dir, dentry);
+#endif
 }
 
 int security_path_unlink(const struct path *dir, struct dentry *dentry)
 {
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	int ret;
+#endif
 	if (unlikely(IS_PRIVATE(d_backing_inode(dir->dentry))))
 		return 0;
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	ret = call_int_hook(path_unlink, 0, dir, dentry);
+	if (!ret) {
+		if (unlikely(dir->dentry->d_inode->is_sus_path && uid_matches_suspicious_path())) {
+			return -ENOENT;
+		}
+	}
+	return ret;
+#else
 	return call_int_hook(path_unlink, 0, dir, dentry);
+#endif
 }
 EXPORT_SYMBOL(security_path_unlink);
 
 int security_path_symlink(const struct path *dir, struct dentry *dentry,
 			  const char *old_name)
 {
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	int ret;
+#endif
 	if (unlikely(IS_PRIVATE(d_backing_inode(dir->dentry))))
 		return 0;
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	ret = call_int_hook(path_symlink, 0, dir, dentry, old_name);
+	if (!ret) {
+		if (unlikely(dir->dentry->d_inode->is_sus_path && uid_matches_suspicious_path())) {
+			return -ENOENT;
+		}
+	}
+	return ret;
+#else
 	return call_int_hook(path_symlink, 0, dir, dentry, old_name);
+#endif
 }
 
 int security_path_link(struct dentry *old_dentry, const struct path *new_dir,
 		       struct dentry *new_dentry)
 {
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	int ret;
+#endif
 	if (unlikely(IS_PRIVATE(d_backing_inode(old_dentry))))
 		return 0;
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	ret = call_int_hook(path_link, 0, old_dentry, new_dir, new_dentry);
+	if (!ret) {
+		if (unlikely(old_dentry->d_inode->is_sus_path && uid_matches_suspicious_path())) {
+			return -ENOENT;
+		}
+	}
+	return ret;
+#else
 	return call_int_hook(path_link, 0, old_dentry, new_dir, new_dentry);
+#endif
 }
 
 int security_path_rename(const struct path *old_dir, struct dentry *old_dentry,
 			 const struct path *new_dir, struct dentry *new_dentry,
 			 unsigned int flags)
 {
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	int ret;
+#endif
 	if (unlikely(IS_PRIVATE(d_backing_inode(old_dentry)) ||
 		     (d_is_positive(new_dentry) && IS_PRIVATE(d_backing_inode(new_dentry)))))
 		return 0;
@@ -484,30 +549,80 @@ int security_path_rename(const struct path *old_dir, struct dentry *old_dentry,
 			return err;
 	}
 
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	ret = call_int_hook(path_rename, 0, old_dir, old_dentry, new_dir,
+				new_dentry);
+	if (!ret) {
+		if (unlikely(old_dentry->d_inode->is_sus_path && uid_matches_suspicious_path())) {
+			return -ENOENT;
+		}
+	}
+	return ret;
+#else
 	return call_int_hook(path_rename, 0, old_dir, old_dentry, new_dir,
 				new_dentry);
+#endif
 }
 EXPORT_SYMBOL(security_path_rename);
 
 int security_path_truncate(const struct path *path)
 {
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	int ret;
+#endif
 	if (unlikely(IS_PRIVATE(d_backing_inode(path->dentry))))
 		return 0;
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	ret = call_int_hook(path_truncate, 0, path);
+	if (!ret) {
+		if (unlikely(path->dentry->d_inode->is_sus_path && uid_matches_suspicious_path())) {
+			return -ENOENT;
+		}
+	}
+	return ret;
+#else
 	return call_int_hook(path_truncate, 0, path);
+#endif
 }
 
 int security_path_chmod(const struct path *path, umode_t mode)
 {
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	int ret;
+#endif
 	if (unlikely(IS_PRIVATE(d_backing_inode(path->dentry))))
 		return 0;
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	ret = call_int_hook(path_chmod, 0, path, mode);
+	if (!ret) {
+		if (unlikely(path->dentry->d_inode->is_sus_path && uid_matches_suspicious_path())) {
+			return -ENOENT;
+		}
+	}
+	return ret;
+#else
 	return call_int_hook(path_chmod, 0, path, mode);
+#endif
 }
 
 int security_path_chown(const struct path *path, kuid_t uid, kgid_t gid)
 {
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	int ret;
+#endif
 	if (unlikely(IS_PRIVATE(d_backing_inode(path->dentry))))
 		return 0;
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	ret = call_int_hook(path_chown, 0, path, uid, gid);
+	if (!ret) {
+		if (unlikely(path->dentry->d_inode->is_sus_path && uid_matches_suspicious_path())) {
+			return -ENOENT;
+		}
+	}
+	return ret;
+#else
 	return call_int_hook(path_chown, 0, path, uid, gid);
+#endif
 }
 EXPORT_SYMBOL(security_path_chown);
 
@@ -614,9 +729,22 @@ int security_inode_follow_link(struct dentry *dentry, struct inode *inode,
 
 int security_inode_permission(struct inode *inode, int mask)
 {
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	int ret;
+#endif
 	if (unlikely(IS_PRIVATE(inode)))
 		return 0;
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	ret = call_int_hook(inode_permission, 0, inode, mask);
+	if (!ret) {
+		if (unlikely(inode->is_sus_path && uid_matches_suspicious_path())) {
+			return -ENOENT;
+		}
+	}
+	return ret;
+#else
 	return call_int_hook(inode_permission, 0, inode, mask);
+#endif
 }
 
 int security_inode_setattr(struct dentry *dentry, struct iattr *attr)
@@ -634,9 +762,22 @@ EXPORT_SYMBOL_GPL(security_inode_setattr);
 
 int security_inode_getattr(const struct path *path)
 {
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	int ret;
+#endif
 	if (unlikely(IS_PRIVATE(d_backing_inode(path->dentry))))
 		return 0;
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	ret = call_int_hook(inode_getattr, 0, path);
+	if (!ret) {
+		if (unlikely(path->dentry->d_inode->is_sus_path && uid_matches_suspicious_path())) {
+			return -ENOENT;
+		}
+	}
+	return ret;
+#else
 	return call_int_hook(inode_getattr, 0, path);
+#endif
 }
 
 int security_inode_setxattr(struct dentry *dentry, const char *name,
@@ -674,16 +815,42 @@ void security_inode_post_setxattr(struct dentry *dentry, const char *name,
 
 int security_inode_getxattr(struct dentry *dentry, const char *name)
 {
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	int ret;
+#endif
 	if (unlikely(IS_PRIVATE(d_backing_inode(dentry))))
 		return 0;
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	ret = call_int_hook(inode_getxattr, 0, dentry, name);
+	if (!ret) {
+		if (unlikely(dentry->d_inode->is_sus_path && uid_matches_suspicious_path())) {
+			return -ENOENT;
+		}
+	}
+	return ret;
+#else
 	return call_int_hook(inode_getxattr, 0, dentry, name);
+#endif
 }
 
 int security_inode_listxattr(struct dentry *dentry)
 {
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	int ret;
+#endif
 	if (unlikely(IS_PRIVATE(d_backing_inode(dentry))))
 		return 0;
+#ifdef CONFIG_KSU_SUSFS_SUS_PATH
+	ret = call_int_hook(inode_listxattr, 0, dentry);
+	if (!ret) {
+		if (unlikely(dentry->d_inode->is_sus_path && uid_matches_suspicious_path())) {
+			return -ENOENT;
+		}
+	}
+	return ret;
+#else
 	return call_int_hook(inode_listxattr, 0, dentry);
+#endif
 }
 
 int security_inode_removexattr(struct dentry *dentry, const char *name)
